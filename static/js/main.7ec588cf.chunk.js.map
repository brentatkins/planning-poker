{"version":3,"sources":["constants/routes.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/useFirebaseCollection.js","components/Firebase/useFirebaseDoc.js","components/Firebase/index.js","components/UserSession/context.js","components/UserSession/useAuthentication.js","components/UserSession/useAuthorisation.js","components/UserSession/authRules.js","components/UserSession/index.js","components/Page/index.jsx","serviceWorker.js","components/Pages/Loading/index.jsx","components/App/index.jsx","index.js"],"names":["LANDING","HOME","SESSION","buildSessionUrl","id","FirebaseContext","React","createContext","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","doSignIn","a","provider","app","auth","GithubAuthProvider","signInWithPopup","doSignOut","signOut","sessions","firestore","collection","session","doc","initializeApp","this","useFirebaseCollection","collectionName","firebase","useContext","useState","error","setError","isLoading","setIsLoading","setCollection","useEffect","unsubscribe","onSnapshot","snapshot","list","forEach","push","data","err","useFirebaseDoc","setDoc","AuthUserContext","getNameFromEmail","email","match","replace","useAuthentication","user","currentUser","initializing","state","setState","onChange","planningPokerUsername","onAuthStateChanged","useAuthorisation","condition","history","ROUTES","rules","userIsSignedIn","withRouter","title","children","isNotHome","path","full","fill","overflow","align","background","pad","direction","height","min","justify","onClick","icon","color","Boolean","window","location","hostname","Loading","Page","LandingPage","lazy","SessionPage","HomePage","App","authState","Provider","value","basename","Suspense","fallback","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ec588cf.chunk.js","sourcesContent":["export const LANDING = \"/\";\nexport const SIGN_IN = \"/signin\";\nexport const HOME = \"/home\";\nexport const SESSION = \"/session/:id\";\nexport const buildSessionUrl = id => `/session/${id}`;\n","import React from \"react\";\n\nconst FirebaseContext = React.createContext(null);\n\nexport default FirebaseContext;\n","import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    this.auth = app.auth();\n    this.firestore = app.firestore;\n  }\n\n  doSignIn = async () => {\n    const provider = new app.auth.GithubAuthProvider();\n    await this.auth.signInWithPopup(provider);\n  };\n\n  doSignOut = () => this.auth.signOut();\n\n  sessions = () => this.firestore().collection(\"sessions\");\n\n  session = id => this.sessions().doc(id);\n}\n\nexport default Firebase;\n","import { useEffect, useState, useContext } from \"react\";\n\nimport { FirebaseContext } from \"../Firebase\";\n\nfunction useFirebaseCollection(collectionName) {\n  const firebase = useContext(FirebaseContext);\n\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [collection, setCollection] = useState([]);\n\n  useEffect(() => {\n    const unsubscribe = firebase\n      .firestore()\n      .collection(collectionName)\n      .onSnapshot(\n        snapshot => {\n          const list = [];\n          snapshot.forEach(doc => {\n            list.push({ id: doc.id, ...doc.data() });\n          });\n          setIsLoading(false);\n          setCollection(list);\n        },\n        err => {\n          setIsLoading(false);\n          setError(err);\n        }\n      );\n\n    return () => unsubscribe();\n  }, [firebase, collectionName]);\n\n  return { collection, error, isLoading };\n}\n\nexport default useFirebaseCollection;\n","import { useEffect, useState, useContext } from \"react\";\n\nimport { FirebaseContext } from \"../Firebase\";\n\nfunction useFirebaseDoc(id) {\n  const firebase = useContext(FirebaseContext);\n\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [doc, setDoc] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = firebase\n      .firestore()\n      .doc(id)\n      .onSnapshot(\n        doc => {\n          setIsLoading(false);\n          setDoc({ id: doc.id, ...doc.data() });\n        },\n        err => {\n          setIsLoading(false);\n          setError(err);\n        }\n      );\n\n    return () => unsubscribe();\n  }, [firebase, id]);\n\n  return { error, isLoading, doc };\n}\n\nexport default useFirebaseDoc;\n","import FirebaseContext from \"./context\";\nimport Firebase from \"./firebase\";\nimport useFirebaseCollection from \"./useFirebaseCollection\";\nimport useFirebaseDoc from \"./useFirebaseDoc\";\n\nexport default Firebase;\n\nexport { FirebaseContext, useFirebaseCollection, useFirebaseDoc };\n","import { createContext } from \"react\";\n\nconst AuthUserContext = createContext(null);\n\nexport default AuthUserContext;\n","import { useState, useEffect, useContext } from \"react\";\n\nimport { FirebaseContext } from \"../Firebase\";\n\nconst getNameFromEmail = email => {\n  const reMatch = /^([^@]*)@/;\n  const namePart = email.match(reMatch)[1];\n  const name = namePart.replace(/\\.|-/g, \" \");\n  return name;\n};\n\nconst useAuthentication = () => {\n  const firebase = useContext(FirebaseContext);\n\n  const [state, setState] = useState(() => {\n    const user = firebase.auth.currentUser;\n\n    return { initializing: !user, user };\n  });\n\n  function onChange(user) {\n    if (user) {\n      // HACK to build a user name from email address\n      // should really get this from github, but need something working now\n      user.planningPokerUsername = getNameFromEmail(user.email);\n    }\n\n    setState({ initializing: false, user });\n  }\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth.onAuthStateChanged(onChange);\n\n    return () => unsubscribe();\n  }, [firebase]);\n\n  return state;\n};\n\nexport default useAuthentication;\n","import { useEffect, useContext } from \"react\";\n\nimport { FirebaseContext } from \"../Firebase\";\nimport * as ROUTES from \"../../constants/routes\";\n\nconst useAuthorisation = (condition, history) => {\n  const firebase = useContext(FirebaseContext);\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth.onAuthStateChanged(user => {\n      if (!condition(user)) {\n        history.push(ROUTES.LANDING);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [firebase, condition]);\n};\n\nexport default useAuthorisation;\n","const rules = {\n  userIsSignedIn: user => !!user\n};\n\nexport default rules;\n","import AuthUserContext from \"./context\";\nimport useAuthentication from \"./useAuthentication\";\nimport useAuthorisation from \"./useAuthorisation\";\nimport authRules from \"./authRules\";\n\nexport { AuthUserContext, useAuthentication, useAuthorisation, authRules };\n","import React from \"react\";\nimport { Grommet, Box, Heading, Button } from \"grommet\";\nimport { LinkPrevious } from \"grommet-icons\";\nimport { withRouter } from \"react-router-dom\";\n\nimport * as ROUTES from \"../../constants/routes\";\n\nconst Page = ({ title, match, history, children }) => {\n  const isNotHome = match.path !== ROUTES.HOME && match.path !== ROUTES.LANDING;\n\n  return (\n    <Grommet full>\n      <Box fill overflow=\"auto\" align=\"start\" background=\"light-4\" pad=\"small\">\n        <Box direction=\"row\" height={{ min: \"auto\" }}>\n          {isNotHome && (\n            <Box justify=\"center\" pad=\"small\">\n              <Button\n                onClick={() => history.push(ROUTES.HOME)}\n                icon={<LinkPrevious color=\"accent-2\" />}\n              />\n            </Box>\n          )}\n          {title && <Heading>{title}</Heading>}\n        </Box>\n        {children}\n      </Box>\n    </Grommet>\n  );\n};\n\nexport default withRouter(Page);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nimport Page from \"../../Page\";\n\nconst Loading = () => {\n  return <Page title=\"Loading...\"></Page>;\n};\n\nexport default Loading;\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport { AuthUserContext, useAuthentication } from \"../UserSession\";\nimport * as ROUTES from \"../../constants/routes\";\n\nimport LoadingPage from \"../Pages/Loading\";\n\nconst LandingPage = React.lazy(() => import(\"../Pages/Landing\"));\nconst SessionPage = React.lazy(() => import(\"../Pages/Session\"));\nconst HomePage = React.lazy(() => import(\"../Pages/Home\"));\n\nconst App = () => {\n  const authState = useAuthentication();\n\n  return (\n    <AuthUserContext.Provider value={authState.user}>\n      <Router basename=\"/\">\n        <React.Suspense fallback={<LoadingPage />}>\n          <Route exact path={ROUTES.LANDING} component={LandingPage} />\n          <Route path={ROUTES.HOME} component={HomePage} />\n          <Route path={ROUTES.SESSION} component={SessionPage} />\n        </React.Suspense>\n      </Router>\n    </AuthUserContext.Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./components/App\";\nimport Firebase, { FirebaseContext } from \"./components/Firebase\";\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}