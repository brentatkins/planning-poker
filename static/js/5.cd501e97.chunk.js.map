{"version":3,"sources":["components/UI/Toast/index.jsx","components/SessionList/AddSession.jsx","components/SessionList/index.jsx","components/Pages/Home/index.jsx"],"names":["Toast","this","startAutoHideTimeout","timeoutAutoHide","clearTimeout","props","duration","onClose","setTimeout","children","modal","position","full","rest","Layer","margin","responsive","plain","Component","AddSession","useState","title","setTitle","firebase","useContext","FirebaseContext","user","AuthUserContext","a","sessions","add","createdBy","planningPokerUsername","dateCreated","Date","Box","align","width","pad","round","Heading","level","TextInput","autoFocus","placeholder","value","onChange","event","target","direction","basis","Button","color","onClick","background","SessionList","onNavigateToSession","isAddOpen","setIsAddOpen","useFirebaseCollection","collection","error","isLoading","sortedSessions","sortBy","Grid","gap","icon","AddCircle","label","primary","wrap","map","session","key","id","bottom","Text","size","formatDistance","toDate","Home","history","useAuthorisation","authRules","userIsSignedIn","Page","push","ROUTES"],"mappings":"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","file":"static/js/5.cd501e97.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Layer } from \"grommet\";\n\nexport class Toast extends Component {\n  componentDidMount() {\n    this.startAutoHideTimeout();\n  }\n\n  componentWillUnmount() {\n    const { timeoutAutoHide } = this;\n    if (timeoutAutoHide) {\n      clearTimeout(this.timeoutAutoHide);\n    }\n  }\n\n  startAutoHideTimeout() {\n    const { duration, onClose } = this.props;\n    if (duration) {\n      this.timeoutAutoHide = setTimeout(() => {\n        onClose();\n      }, duration * 1000);\n    }\n  }\n\n  render() {\n    const { children, modal, position, full, ...rest } = this.props;\n    return (\n      <Layer\n        position={position || \"top\"}\n        full={full}\n        modal={modal}\n        margin=\"none\"\n        responsive\n        plain={modal ? false : true}\n        {...rest}\n      >\n        {children}\n      </Layer>\n    );\n  }\n}\n","import React, { useState, useContext } from \"react\";\nimport { Box, Heading, Button, TextInput } from \"grommet\";\n\nimport { Toast } from \"../UI/Toast\";\nimport { FirebaseContext } from \"../Firebase\";\nimport { AuthUserContext } from \"../UserSession\";\n\nconst AddSession = ({ onClose }) => {\n  const [title, setTitle] = useState(\"\");\n  const firebase = useContext(FirebaseContext);\n  const user = useContext(AuthUserContext);\n\n  async function saveNewSession() {\n    await firebase.sessions().add({\n      title,\n      createdBy: user.planningPokerUsername,\n      dateCreated: new Date()\n    });\n    onClose();\n  }\n\n  return (\n    <Toast position=\"center\" modal>\n      <Box align=\"center\">\n        <Box width=\"medium\" pad=\"small\" round={false}>\n          {/* <Image\n          src=\"https://uploads.codesandbox.io/uploads/user/5dfd08c4-cbb6-4165-a264-f2eb4b2f6ef1/-wkS-gremlin.png\"\n          fit=\"cover\"\n        /> */}\n          <Heading level=\"4\" margin=\"small\">\n            Please enter a title\n          </Heading>\n          <TextInput\n            autoFocus\n            placeholder=\"type here\"\n            value={title}\n            onChange={event => setTitle(event.target.value)}\n          />\n        </Box>\n        <Box width=\"medium\" margin=\"none\" direction=\"row\">\n          <Box basis=\"1/2\">\n            <Button plain color=\"dark-1\" onClick={saveNewSession}>\n              <Box pad=\"small\" align=\"center\" background=\"status-ok\">\n                Ok\n              </Box>\n            </Button>\n          </Box>\n          <Box basis=\"1/2\">\n            <Button plain color=\"dark-1\" onClick={onClose}>\n              <Box pad=\"small\" align=\"center\" background=\"status-error\">\n                Cancel\n              </Box>\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </Toast>\n  );\n};\n\nexport default AddSession;\n","import React, { useState } from \"react\";\nimport { Grid, Box, Text, Heading, Button } from \"grommet\";\nimport { AddCircle } from \"grommet-icons\";\nimport { formatDistance } from \"date-fns\";\nimport sortBy from \"lodash/fp/sortBy\";\n\nimport AddSession from \"./AddSession\";\nimport { useFirebaseCollection } from \"../Firebase\";\n\nconst SessionList = ({ onNavigateToSession }) => {\n  const [isAddOpen, setIsAddOpen] = useState(false);\n\n  const { collection: sessions, error, isLoading } = useFirebaseCollection(\n    \"sessions\"\n  );\n\n  if (isLoading) {\n    return <Heading level=\"4\">Loading...</Heading>;\n  } else if (error) {\n    return <Heading level=\"4\">Error loading sessions</Heading>;\n  }\n\n  const sortedSessions = sortBy(\"title\")(sessions);\n\n  return (\n    <Grid align=\"start\" gap=\"small\">\n      <Box align=\"start\">\n        <Button\n          icon={<AddCircle />}\n          label=\"Create New Session\"\n          onClick={() => setIsAddOpen(true)}\n          color=\"accent-4\"\n          primary\n        />\n      </Box>\n      <Box wrap gap=\"small\" direction=\"row\">\n        {sortedSessions.map(session => (\n          <Box\n            key={`sessionlist_${session.id}`}\n            background=\"neutral-2\"\n            pad=\"small\"\n            margin={{ bottom: \"small\" }}\n            onClick={() => onNavigateToSession(session.id)}\n          >\n            <Heading level=\"3\" margin=\"none\">\n              {session.title}\n            </Heading>\n            <Text size=\"xsmall\">\n              Created by {session.createdBy}{\" \"}\n              {session.dateCreated &&\n                `${formatDistance(\n                  session.dateCreated.toDate(),\n                  new Date()\n                )} ago`}\n            </Text>\n          </Box>\n        ))}\n      </Box>\n      {isAddOpen && <AddSession onClose={() => setIsAddOpen(false)} />}\n    </Grid>\n  );\n};\n\nexport default SessionList;\n","import React from \"react\";\n\nimport { useAuthorisation, authRules } from \"../../UserSession\";\nimport SessionList from \"../../SessionList\";\nimport Page from \"../../Page\";\nimport * as ROUTES from \"../../../constants/routes\";\n\nconst Home = ({ history }) => {\n  useAuthorisation(authRules.userIsSignedIn, history);\n\n  function navigateToSession(id) {\n    history.push(ROUTES.buildSessionUrl(id));\n  }\n\n  return (\n    <Page title=\"All Sessions\">\n      <SessionList onNavigateToSession={navigateToSession} />\n    </Page>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}